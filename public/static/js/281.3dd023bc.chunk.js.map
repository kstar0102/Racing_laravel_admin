{"version":3,"file":"static/js/281.3dd023bc.chunk.js","mappings":"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","sources":["config/global.tsx","components/NewEditTable.tsx","pages/RaceManagementPage/ExpandableTable.tsx","pages/RaceManagementPage/RegisterModal.tsx","pages/RaceManagementPage/index.tsx"],"sourcesContent":["export const minute_data = [\r\n    { value: '00', label: '00' },\r\n    { value: '05', label: '05' },\r\n    { value: '10', label: '10' },\r\n    { value: '15', label: '15' },\r\n    { value: '20', label: '20' },\r\n    { value: '25', label: '25' },\r\n    { value: '30', label: '30' },\r\n    { value: '35', label: '35' },\r\n    { value: '40', label: '40' },\r\n    { value: '45', label: '45' },\r\n    { value: '50', label: '50' },\r\n    { value: '55', label: '55' },\r\n];\r\n\r\nexport const hour_data = [\r\n    { value: '13', label: '13' },\r\n    { value: '14', label: '14' },\r\n    { value: '15', label: '15' },\r\n    { value: '16', label: '16' },\r\n    { value: '17', label: '17' },\r\n    { value: '18', label: '18' },\r\n    { value: '19', label: '19' },\r\n    { value: '20', label: '20' },\r\n    { value: '21', label: '21' },\r\n    { value: '22', label: '22' },\r\n    { value: '23', label: '23' },\r\n    { value: '00', label: '00' },\r\n    { value: '01', label: '01' },\r\n    { value: '02', label: '02' },\r\n];\r\n\r\nexport const month_data = [\r\n    { value: '1', label: '1月' },\r\n    { value: '2', label: '2月' },\r\n    { value: '3', label: '3月' },\r\n    { value: '4', label: '4月' },\r\n    { value: '5', label: '5月' },\r\n    { value: '6', label: '6月' },\r\n    { value: '7', label: '7月' },\r\n    { value: '8', label: '8月' },\r\n    { value: '9', label: '9月' },\r\n    { value: '10', label: '10月' },\r\n    { value: '11', label: '11月' },\r\n    { value: '12', label: '12月' },\r\n]\r\n\r\nexport const race_number_data = [\r\n    { value: '1R', label: '1R' },\r\n    { value: '2R', label: '2R' },\r\n    { value: '3R', label: '3R' },\r\n    { value: '4R', label: '4R' },\r\n    { value: '5R', label: '5R' },\r\n    { value: '6R', label: '6R' },\r\n    { value: '7R', label: '7R' },\r\n    { value: '8R', label: '8R' },\r\n    { value: '9R', label: '9R' },\r\n    { value: '10R', label: '10R' },\r\n    { value: '11R', label: '11R' },\r\n    { value: '12R', label: '12R' },\r\n]\r\n\r\nexport const user_role_data = [\r\n  { value: '0', label: 'ユーザー' },\r\n  { value: '1', label: '管理者' },\r\n  { value: '2', label: 'スーパーユーザー' },\r\n]\r\n\r\nexport const color_data = [\r\n  \"red\", \"blue\",\"tear\"\r\n]\r\n\r\nexport const checkOverlap = (array: any) => {\r\n  \r\n    for (let i = 0; i < array.length; i++) {\r\n      const element = array[i];\r\n      const newArray = array.filter((item:any) => item == element);\r\n      if (newArray.length > 1) {\r\n        return false;\r\n      }else{\r\n        return true;\r\n      }\r\n    }\r\n  \r\n};","import React from 'react';\r\nimport { Table } from 'semantic-ui-react';\r\nimport { Select, Input, Button } from 'antd';\r\n\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst NewEditTable = ({filteredArray, setRaceResult, no, webRaceResults} : any) => {\r\n\r\n    const [rows, setRows] = React.useState([\r\n        { id: 1 },\r\n        { id: 2 },\r\n        { id: 3 },\r\n    ]);\r\n\r\n    const [rowData, setRowData] = React.useState(rows.map((value, index) => ({\r\n        rank: `${index + 1}着`,\r\n        horse:  webRaceResults.length ? webRaceResults[index]?.horse : filteredArray[0]['value'],\r\n        odds: webRaceResults.length ? webRaceResults[index]?.odds : '',\r\n        single: webRaceResults.length ? webRaceResults[index]?.single : '',\r\n        double: webRaceResults.length ? webRaceResults[index]?.double : '',\r\n    })));\r\n    \r\n    const addRow = () => {\r\n        const newRow = { id: rows.length + 1 };\r\n        const newRowData = {\r\n            rank: '3着',\r\n            horse: filteredArray[0]['value'],\r\n            odds: '',\r\n            single: '',\r\n            double: '',\r\n        };\r\n        \r\n        setRows([...rows, newRow]);\r\n        setRowData([...rowData, newRowData]);\r\n    };\r\n\r\n    const deleteRow = () => {\r\n        if (rows.length > 0) {\r\n            const updatedRows = [...rows];\r\n            updatedRows.pop(); // 最後の行を削除\r\n            setRows(updatedRows);\r\n    \r\n            const updatedRowData = [...rowData];\r\n            updatedRowData.pop(); // 最後の行のデータを削除\r\n            setRowData(updatedRowData);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button onClick={addRow}>\r\n                追  加\r\n            </Button>\r\n            <Button onClick={deleteRow} style={{marginLeft: 10}}>\r\n                削 除\r\n            </Button>\r\n            <Table celled unstackable>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell className='w-24'>順位</Table.HeaderCell>\r\n                        <Table.HeaderCell>馬名</Table.HeaderCell>\r\n                        <Table.HeaderCell className='w-28'>単勝オッズ</Table.HeaderCell>\r\n                        <Table.HeaderCell className='w-28'>単勝</Table.HeaderCell>\r\n                        <Table.HeaderCell className='w-28'>複勝</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n\r\n                <Table.Body>\r\n                    {rows.map((row, index) => {\r\n                        return (\r\n                        <Table.Row key={index}>\r\n                            <Table.Cell>\r\n                                <Input \r\n                                    value={rowData[index].rank} \r\n                                    onChange={(e) => {\r\n                                        const updatedRowData = [...rowData];\r\n                                        updatedRowData[index].rank = e.target.value;\r\n                                        setRowData(updatedRowData);\r\n                                        setRaceResult([no, updatedRowData]);\r\n                                    }}\r\n                                />\r\n                            </Table.Cell>\r\n                            <Table.Cell>\r\n                                <Select\r\n                                    value={rowData[index].horse}\r\n                                    className='w-full'\r\n                                    onChange={(value) => {\r\n                                        const updatedRowData = [...rowData];\r\n                                        let errorRowDataState = true;\r\n                                        updatedRowData.map((item)=>{\r\n                                            if (item.horse == value) {\r\n                                                errorRowDataState = false;\r\n                                            }\r\n                                            return item;\r\n                                        });\r\n                                        if (errorRowDataState) {\r\n                                            updatedRowData[index].horse = value;\r\n                                            setRowData(updatedRowData);\r\n                                            setRaceResult([no, updatedRowData]);\r\n                                        }else{\r\n                                            toast.error(\"予想が被っています。\");\r\n                                        }\r\n                                    }}\r\n                                    options={filteredArray}\r\n                                />\r\n                            </Table.Cell>\r\n                            <Table.Cell>\r\n\r\n                                <Input\r\n                                    value={rowData[index].odds}\r\n                                    onChange={(e) => {\r\n                                        const updatedRowData = [...rowData];\r\n                                        updatedRowData[index].odds = e.target.value;\r\n                                        setRowData(updatedRowData);\r\n                                        setRaceResult([no, updatedRowData]);\r\n                                    }}\r\n                                    onBlur={()=> {\r\n                                        const updatedRowData = [...rowData];\r\n                                        if (rowData[index].rank == \"1着\") {\r\n                                            updatedRowData[index].single = updatedRowData[index].odds * 100;\r\n                                        }\r\n                                        setRowData(updatedRowData);\r\n                                        setRaceResult([no, updatedRowData]);\r\n                                    }}\r\n                                />\r\n\r\n                            </Table.Cell>\r\n                            <Table.Cell>\r\n                                {\r\n                                    rowData[index].rank == \"1着\" && (\r\n                                        <Input\r\n                                            value={rowData[index].single}\r\n                                            onChange={(e) => {\r\n                                                const updatedRowData = [...rowData];\r\n                                                updatedRowData[index].single = e.target.value;\r\n                                                setRowData(updatedRowData);\r\n                                                setRaceResult([no, updatedRowData]);\r\n                                            }}\r\n                                        />\r\n                                    )\r\n                                }\r\n                            </Table.Cell>\r\n                            <Table.Cell>\r\n                                <Input\r\n                                    value={rowData[index].double}\r\n                                    onChange={(e) => {\r\n                                        const updatedRowData = [...rowData];\r\n                                        updatedRowData[index].double = e.target.value;\r\n                                        setRowData(updatedRowData);\r\n                                        setRaceResult([no, updatedRowData]);\r\n                                    }}\r\n                                />\r\n                            </Table.Cell>\r\n                        </Table.Row>\r\n                    )})}\r\n                </Table.Body>\r\n            </Table>\r\n        </div>\r\n\r\n    );\r\n\r\n};\r\n\r\nexport default NewEditTable;","import React, { useEffect, useState } from 'react';\r\nimport qs from 'qs';\r\nimport { Table, Empty, Select, Badge, Modal } from 'antd';\r\nimport type { TablePaginationConfig } from 'antd/es/table';\r\nimport type { FilterValue, SorterResult, TableCurrentDataSource } from 'antd/es/table/interface';\r\nimport { RaceDataType } from '../../interface/RaceDataType';\r\nimport type { ColumnsType } from 'antd/es/table';\r\nimport { Label, Button, Message } from 'semantic-ui-react'\r\nimport NewEditTable from '../../components/NewEditTable';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport actions from '../../redux/RaceManagement/actions';\r\nimport { RootState } from '../../redux/store';\r\n\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\ninterface TableParams {\r\n  pagination?: TablePaginationConfig;\r\n  sortField?: string;\r\n  sortOrder?: string;\r\n  filters?: Record<string, FilterValue | null>;\r\n}\r\n\r\n// const getRandomuserParams = (params: TableParams) => ({\r\n//     results: params.pagination?.pageSize,\r\n//     page: params.pagination?.current,\r\n//     ...params,\r\n// });\r\n\r\ninterface IExpandableTable {\r\n    showEditModal: any;\r\n}\r\n\r\ninterface RaceDataWithHorses extends RaceDataType {\r\n    running_horses: { id: number; name: string }[];\r\n    web_race_results: [];\r\n    delete_horses: [];\r\n}\r\n\r\nconst ExpandableTable: React.FC<IExpandableTable> = ({showEditModal}) => {\r\n    const columns_data: ColumnsType<RaceDataType> = [\r\n        // { title: 'id', dataIndex: 'id', key: 'id', width: '8%', responsive: ['xs'], },\r\n        { title: '開催日', dataIndex: 'event_date', key: 'event_date', width: '20%' },\r\n        { title: '開催場所', dataIndex: 'event_place', key: 'event_place', width: '10%',render: (_, record) => (\r\n            <div>\r\n                <Label color='purple' horizontal className={'cursor'} style={{marginRight: 15,}}>\r\n                    {record.places.name}\r\n                </Label>\r\n            </div>\r\n        )  },\r\n        { title: 'Race', dataIndex: 'race_number', key: 'race_number' },\r\n        { title: 'レース名', dataIndex: 'race_name', key: 'race_name' },\r\n        { title: '備考', dataIndex: 'action', key: 'action', width: '20%',render: (_, record) => (\r\n            <div>\r\n                <Label color='red' horizontal className={'cursor'} style={{marginRight: 15,}} onClick={() => showModal(record.id)}>\r\n                    削  除\r\n                </Label>\r\n                <Label color='teal' horizontal className={'cursor'} style={{marginRight: 15,}} onClick={() => showEditModal(record)}>\r\n                    編  集\r\n                </Label>\r\n                <Badge status=\"success\" text=\"レース結果変更\" />\r\n            </div>\r\n        ),\r\n        ellipsis: true,},\r\n        Table.EXPAND_COLUMN,\r\n    ];\r\n\r\n    \r\n    const [data, setData] = useState<RaceDataType[]>();\r\n    const [loading, setLoading] = useState(false);\r\n    const [tableParams, setTableParams] = useState<TableParams>({\r\n        pagination: {\r\n            current: 1,\r\n            pageSize: 10,\r\n        },\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n    const {races} = useSelector((state:RootState) => state.raceReducer);\r\n    const [deleteHorseArray, setDeleteHorseArray] = useState(['0','0','0','0','0']);\r\n    const [open, setOpen] = useState(false);\r\n    const [deleteId, setDeleteId] = useState(0);\r\n\r\n    useEffect(()=>{\r\n        setLoading(true);\r\n        dispatch({\r\n            type: actions.GETRACESDATA\r\n        });\r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n        dispatch({\r\n            type: actions.GETRACESDATA\r\n        });\r\n    },[]);\r\n\r\n    const showModal = (id:any) => {\r\n        setOpen(true);\r\n        setDeleteId(id);\r\n    };\r\n    \r\n    const hideModal = () => {\r\n        setOpen(false);\r\n        setDeleteId(0);\r\n    };\r\n\r\n    useEffect(()=>{\r\n        setLoading(false);\r\n        setData(races);\r\n        console.log(races, \"=====================================\");\r\n    },[races]);\r\n\r\n//   const fetchData = () => {\r\n//     setLoading(true);\r\n//     fetch(`https://randomuser.me/api?${qs.stringify(getRandomuserParams(tableParams))}`)\r\n//       .then((res) => res.json())\r\n//       .then(({ results }) => {\r\n//         setData(results);\r\n//         setLoading(false);\r\n//         setTableParams({\r\n//           ...tableParams,\r\n//           pagination: {\r\n//             ...tableParams.pagination,\r\n//             total: 200,\r\n//             // 200 is mock data, you should read it from server\r\n//             // total: data.totalCount,\r\n//           },\r\n//         });\r\n//       });\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchData();\r\n//   }, [JSON.stringify(tableParams)]);\r\n\r\n    const handleTableChange = (\r\n        pagination: TablePaginationConfig,\r\n        filters: Record<string, FilterValue | null> ,\r\n        sorter: SorterResult<RaceDataType> | SorterResult<RaceDataType>[],\r\n        extra: TableCurrentDataSource<RaceDataType>\r\n    ) => {\r\n        setTableParams({\r\n        pagination,\r\n        filters,\r\n        ...sorter,\r\n        });\r\n    \r\n        // `dataSource` is useless since `pageSize` changed\r\n        if (pagination.pageSize !== tableParams.pagination?.pageSize) {\r\n        setData([]);\r\n        }\r\n    };\r\n    \r\n    const [raceResult, setRaceResult] = useState<undefined | any[]>([]);\r\n    const [changeDeleteData, setChangeDeleteData] = useState<undefined | any[]>([]); \r\n\r\n    const handleSubmit = (id:any) => {\r\n        console.log(raceResult, \"raceResult1\");\r\n        console.log(changeDeleteData, \"changeDeleteData1\");\r\n        console.log(deleteHorseArray, \"deleteHorseArray1\");\r\n        if (!raceResult?.length && changeDeleteData?.length) {\r\n            const body = {\r\n                id: id,\r\n                race_result: changeDeleteData,\r\n                delete_horses_data: deleteHorseArray,\r\n            };\r\n            dispatch({\r\n                type: actions.CREATERACERESULT,\r\n                payload: body\r\n            });\r\n        }else if (id == undefined || raceResult == undefined) {\r\n            toast.error(\"レース結果入力の値が正しく入力されていることを確認してください。\");\r\n        }else if (id == raceResult[0]) {\r\n            const race_result = raceResult[1];\r\n            const body = {\r\n                id: id,\r\n                race_result: race_result,\r\n                delete_horses_data: deleteHorseArray,\r\n            };\r\n\r\n            dispatch({\r\n                type: actions.CREATERACERESULT,\r\n                payload: body\r\n            });\r\n        }else{\r\n            toast.error(\"レース結果入力状態をもう一度確認してください。\");\r\n        }\r\n    }\r\n\r\n    const deleteRace = () => {\r\n        setOpen(false);\r\n        setDeleteId(0);\r\n        dispatch({\r\n            type: actions.DELETERACEDATA,\r\n            payload: deleteId\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Table\r\n                columns={columns_data}\r\n                rowKey={(record) => record.id}\r\n                dataSource={data}\r\n                pagination={tableParams.pagination}\r\n                loading={loading}\r\n                onChange={handleTableChange}\r\n                locale={{\r\n                    emptyText: <Empty description=\"データがありません\" />,\r\n                }}\r\n                scroll={{ x: true }}\r\n                expandable={{\r\n                    expandedRowRender: (record) => \r\n                    {   \r\n                        const data = record as RaceDataWithHorses;\r\n                        const filteredArray = data.running_horses.map((horse) => {\r\n                            return {\r\n                                value: horse.id,\r\n                                label: horse.name,\r\n                            };\r\n                        });\r\n                        const newWebRaceResults = data.web_race_results.map((value:any, index) => ({\r\n                            rank: `${index + 1}着`,\r\n                            horse:  value ? value.horse : filteredArray[0]['value'],\r\n                            odds: value ? value.odds : '',\r\n                            single: value ? value.single : '',\r\n                            double: value ? value.double : '',\r\n                        }));\r\n\r\n                        return (\r\n                            <div className='flex flex-col md:flex-row'>\r\n                            \r\n                                <div className='w-full lg:w-1/2 pr-5'>\r\n                                    <Label basic color='red' pointing='below'>\r\n                                        レース結果入力\r\n                                    </Label>\r\n                                \r\n                                <NewEditTable filteredArray={filteredArray} setRaceResult={setRaceResult} no={record.id} webRaceResults={data.web_race_results} />\r\n\r\n                                </div>\r\n\r\n                                <div className='w-full lg:w-1/2 lg:pl-5 pt-5'>\r\n                                    \r\n                                    <div >\r\n                                        <Label basic color='red' pointing='below'>\r\n                                            消し馬登録\r\n                                        </Label>\r\n                                    </div>\r\n                                    {\r\n                                        deleteHorseArray.map((_value, index) => (\r\n                                            <div className='pt-3 pb-3' key={index}>\r\n                                                <Label color='red' horizontal className='w-24'>\r\n                                                    {index+1}人気\r\n                                                </Label>\r\n                                                <Select\r\n                                                    defaultValue={data.delete_horses.length ? (data.delete_horses[index] as { name: string }).name : filteredArray[0]['label']}\r\n                                                    className='w-full lg:w-64 lg:ml-10'\r\n                                                    onChange={(value) => {\r\n                                                        let updatedRowData: React.SetStateAction<string[]> = [];\r\n                                                        if (data.delete_horses.length) {\r\n                                                            updatedRowData = data.delete_horses.map((item:any)=> item.name);\r\n                                                        }else{\r\n                                                            updatedRowData = [filteredArray[0]['value'].toString(),filteredArray[0]['value'].toString(),filteredArray[0]['value'].toString(),filteredArray[0]['value'].toString(),filteredArray[0]['value'].toString()];\r\n                                                        }\r\n\r\n                                                        updatedRowData[index] = value;\r\n                                                        setDeleteHorseArray(updatedRowData);\r\n                                                        setChangeDeleteData(newWebRaceResults);\r\n                                                    }}\r\n                                                    options={filteredArray}\r\n                                                />\r\n                                            </div>\r\n                                        ))\r\n                                    }\r\n                                    \r\n                                    <div className='flex justify-center'>\r\n                                        <Button className=\"w-full lg:w-60 lg:mr-64\" onClick={()=>handleSubmit(record.id)}>保&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存</Button>\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n\r\n                            </div>\r\n                        )\r\n                    }\r\n                }}\r\n            />\r\n            <Modal\r\n                open={open}\r\n                onCancel={hideModal}\r\n                closable={false}\r\n                footer={() => (\r\n                    <div className='w-full flex justify-center items-center'>\r\n                        <div className='w-40 pr-6'>\r\n                            <Button className=\"w-full\" secondary onClick={hideModal}>い&nbsp;い&nbsp;え</Button>\r\n                        </div>\r\n                        <div className='w-40 pr-6'>\r\n                            <Button className=\"w-full\" primary onClick={deleteRace}>は&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;い</Button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            >\r\n                <Message\r\n                    info\r\n                    header='本当に削除してもよろしいですか？'\r\n                />\r\n            </Modal>\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default ExpandableTable;","import { useEffect, useState } from 'react';\r\nimport { Button, Modal, Select, Input, Typography } from 'antd';\r\nimport { hour_data, minute_data, month_data, race_number_data } from '../../config/global';\r\nimport { Label } from 'semantic-ui-react';\r\nimport { DatePicker } from 'antd';\r\nimport type { DatePickerProps } from 'antd';\r\n\r\nimport { RootState } from '../../redux/store';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport actions from '../../redux/RaceManagement/actions';\r\nimport dayjs from 'dayjs';\r\n\r\nconst { Text } = Typography;\r\n\r\ninterface IRegisterModal {\r\n    _open: boolean;\r\n    showModal: any;\r\n    editData: any;\r\n}\r\n\r\nconst RegisterModal : React.FC<IRegisterModal> = ({_open, showModal, editData}) => {\r\n\r\n    const [open, setOpen] =  useState(_open);\r\n    \r\n    const { places } = useSelector((state: RootState) => state.raceReducer);\r\n    const [placesData, setPlacesData] = useState([]);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=>{\r\n        const updateData = places.map((obj:any) => {\r\n            return {\r\n                value: obj.id,\r\n                label: obj.name\r\n            };\r\n        });\r\n        setPlacesData(updateData);\r\n    },[places]);\r\n\r\n    useEffect(()=>{\r\n        setOpen(_open);\r\n    },[_open]);\r\n\r\n    useEffect(()=>{\r\n        if (Object.entries(editData).length) {\r\n            setEventDate(editData.event_date);\r\n            setEventPlace(editData.event_place);\r\n            setRaceNumber(editData.race_number);\r\n            setHourData(editData.hour_data);\r\n            setMinuteData(editData.minute_data);\r\n            setRaceName(editData.race_name);\r\n            setMonthData(editData.month_data);\r\n\r\n            const newHorseData =[...horseValues];\r\n            editData.running_horses.map((item:any, index:any)=> {\r\n                newHorseData[index] = item.name.split(\":\")[1];\r\n                return item;\r\n            });\r\n\r\n            setHorseValues(newHorseData);\r\n        }else{\r\n            setEventDate('');\r\n            setEventPlace('');\r\n            setRaceNumber('');\r\n            setHourData('13');\r\n            setMinuteData('00');\r\n            setRaceName('');\r\n            setMonthData('1');\r\n        }\r\n    },[editData]);\r\n\r\n    const [eventDate, setEventDate] = useState<string>('');\r\n    const [eventDateError, setEventError] = useState<boolean>(false);\r\n    const onEventDataChange: DatePickerProps['onChange'] = (date, dateString) => {\r\n        setEventDate(dateString);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setOpen(!open);\r\n        showModal();\r\n    };\r\n\r\n    const [eventPlace, setEventPlace] = useState<string>('');\r\n    const [eventPlaceError, setEventPlaceError] = useState<boolean>(false);\r\n    const handleEventPlace = (value: string) => {\r\n        setEventPlace(value);\r\n    };\r\n\r\n    const [raceNumber, setRaceNumber] = useState<string>('');\r\n    const [raceNumberError, setRaceNumberError] = useState<boolean>(false);\r\n    const handleRaceNumberChange = (value: string) => {\r\n        setRaceNumber(value);\r\n    };\r\n\r\n    const [hourData, setHourData] = useState<string>('13');\r\n    const [hourDataError, setHourDataError] = useState<boolean>(false);\r\n    const handleHourDataChange = (value: string) => {\r\n        setHourData(value);\r\n    };\r\n\r\n    const [minuteData, setMinuteData] = useState<string>('00');\r\n    const [minuteDataError, setMinuteDataError] = useState<boolean>(false);\r\n    const handleMinuteDataChange = (value: string) => {\r\n        setMinuteData(value);\r\n    };\r\n\r\n    const [raceName, setRaceName] = useState<string>('');\r\n    const [raceNameError, setRaceNameError] = useState<boolean>(false);\r\n    const handleRaceNameChange = (e : any) => {\r\n        setRaceName(e.target.value);\r\n    };\r\n\r\n    const [monthData, setMonthData] = useState<string>('1');\r\n    const [monthDataError, setMonthDataError] = useState<boolean>(false);\r\n    const handleMonthDataChange = (value: string) => {\r\n        setMonthData(value);\r\n    };\r\n\r\n    const [horseValues, setHorseValues] = useState(Array(20).fill(''));\r\n    const handleInputChange = (index : number, value : string) => {\r\n        const updatedHorseValues = [...horseValues];\r\n        updatedHorseValues[index] = value;\r\n        setHorseValues(updatedHorseValues);\r\n    };\r\n    const [horseValueErrors, setHorseValueErrors] = useState(Array(20).fill(false));\r\n\r\n    const handleOk = () => {\r\n        if (eventDate.length) {\r\n            setEventError(false);\r\n        }\r\n        if (eventPlace) {\r\n            setEventPlaceError(false);\r\n        }\r\n        if (raceNumber.length) {\r\n            setRaceNumberError(false);\r\n        }\r\n        if (hourData.length) {\r\n            setHourDataError(false);\r\n        }\r\n        if (minuteData.length) {\r\n            setMinuteDataError(false);\r\n        }\r\n        if (raceName.length) {\r\n            setRaceNameError(false);\r\n        }\r\n        if (monthData.length) {\r\n            setMonthDataError(false);\r\n        }\r\n\r\n        if (!eventDate.length) {\r\n            setEventError(true);\r\n        }else if (!eventPlace) {\r\n            setEventPlaceError(true);\r\n        }else if (!raceNumber.length) {\r\n            setRaceNumberError(true);\r\n        }else if (!hourData.length) {\r\n            setHourDataError(true);\r\n        }else if (!minuteData.length) {\r\n            setMinuteDataError(true);\r\n        }else if (!raceName.length) {\r\n            setRaceNameError(true);\r\n        }else if (!monthData.length) {\r\n            setMonthDataError(true);\r\n        }else {\r\n            const filteredArray = horseValues.filter((element) => element !== \"\");\r\n\r\n            if (Object.entries(editData).length) {\r\n                const data = {\r\n                    event_date: eventDate,\r\n                    event_place: eventPlace,\r\n                    race_number: raceNumber,\r\n                    hour_data: hourData,\r\n                    minute_data: minuteData,\r\n                    race_name: raceName,\r\n                    month_data: monthData,\r\n                    horse_data: filteredArray\r\n                }\r\n        \r\n                dispatch({\r\n                    type: actions.UPDATERACESTORE,\r\n                    payload: {\r\n                        data: data,\r\n                        id: editData.id\r\n                    }\r\n                });\r\n            }else{\r\n                const data = {\r\n                    event_date: eventDate,\r\n                    event_place: eventPlace,\r\n                    race_number: raceNumber,\r\n                    hour_data: hourData,\r\n                    minute_data: minuteData,\r\n                    race_name: raceName,\r\n                    month_data: monthData,\r\n                    horse_data: filteredArray\r\n                }\r\n        \r\n                dispatch({\r\n                    type: actions.NEWRACESTORE,\r\n                    payload: data\r\n                });\r\n            }\r\n    \r\n            setOpen(!open);\r\n            showModal();\r\n        }\r\n    };\r\n\r\n    return (\r\n\r\n        <Modal\r\n            open={open}\r\n            style={{ top: 20 }}\r\n            title=\"新 規 登 録\"\r\n            onOk={handleOk}\r\n            onCancel={handleCancel}\r\n            footer={(_, { OkBtn, }) => (\r\n                <div className='pr-6'>\r\n                    <Button className=\"w-full\" onClick={handleOk}>保&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存</Button>\r\n                </div>\r\n            )}\r\n            width={400}\r\n        >\r\n\r\n            <div className='flex items-center'>\r\n\r\n                <Label color='red' horizontal className='w-24'>\r\n                    開　催　日\r\n                </Label>\r\n\r\n                {\r\n                    eventDate.length ? \r\n                    <DatePicker className='w-full lg:w-64' onChange={onEventDataChange} id=\"event_date\" name=\"event_date\" value={dayjs(eventDate)} /> : \r\n                    <DatePicker className='w-full lg:w-64' onChange={onEventDataChange} id=\"event_date\" name=\"event_date\" />\r\n                }\r\n                \r\n            </div>\r\n\r\n            { eventDateError && (<Text type=\"danger\" className='p-20'>日付を入力してください。</Text>) }\r\n\r\n            <div className='flex items-center pt-5'>\r\n                \r\n                <Label color='red' horizontal className='w-24'>\r\n                    開催場所\r\n                </Label>\r\n                <Select\r\n                    value={eventPlace ? placesData[Number(eventPlace)] : \"開催場所を選択してください。\"}\r\n                    className='w-full lg:w-64'\r\n                    onChange={handleEventPlace}\r\n                    options={placesData}\r\n                />\r\n\r\n            </div>\r\n            \r\n            { eventPlaceError && (<Text type=\"danger\" className='p-20'>開催地を選択してください。</Text>) }\r\n\r\n            <div className='flex items-center pt-5'>\r\n                \r\n                <Label color='red' horizontal className='w-24'>\r\n                    レース番号\r\n                </Label>\r\n                <Select\r\n                    value={raceNumber ? raceNumber : \"レース番号を選択してください。\"}\r\n                    className='w-full lg:w-64'\r\n                    onChange={handleRaceNumberChange}\r\n                    options={race_number_data}\r\n                />\r\n\r\n            </div>\r\n            \r\n            { raceNumberError && (<Text type=\"danger\" className='p-20'>レース番号を選択してください。</Text>) }\r\n            \r\n            <div className='flex items-center pt-5'>\r\n                \r\n                <Label color='red' horizontal className='w-24'>\r\n                    発走時刻\r\n                </Label>\r\n                <Select\r\n                    value={hourData ? hourData : hourData}\r\n                    className='w-full lg:w-28 mr-2'\r\n                    onChange={handleHourDataChange}\r\n                    options={hour_data}\r\n                />\r\n                \r\n                <Label color='teal' className='w-4'>\r\n                    :\r\n                </Label>\r\n\r\n                <Select\r\n                    value={minuteData ? minuteData : minuteData}\r\n                    className='w-full lg:w-28 ml-2'\r\n                    onChange={handleMinuteDataChange}\r\n                    options={minute_data}\r\n                />  \r\n            </div>\r\n\r\n            { (hourDataError || minuteDataError) && (<Text type=\"danger\" className='p-20'>発走時刻を選択してください。</Text>) }\r\n\r\n            <div className='flex items-center pt-5'>\r\n                \r\n                <Label color='red' horizontal className='w-24'>\r\n                    レース名\r\n                </Label>\r\n                <Input placeholder=\"レース名\" className='w-full lg:w-64' onChange={handleRaceNameChange} value={raceName}/>\r\n\r\n            </div>\r\n\r\n            { raceNameError && (<Text type=\"danger\" className='p-20'>レース名を選択してください。</Text>) }\r\n\r\n            <div className='flex items-center pt-5'>\r\n                \r\n                <Label color='red' horizontal className='w-24'>\r\n                    集計月\r\n                </Label>\r\n                <Select\r\n                    value={monthData ? monthData : monthData}\r\n                    className='w-full lg:w-64'\r\n                    onChange={handleMonthDataChange}\r\n                    options={month_data}\r\n                />\r\n\r\n            </div>\r\n            \r\n            { monthDataError && (<Text type=\"danger\" className='p-20'>集計月を選択してください。</Text>) }\r\n\r\n            <div className='flex items-center pt-5'>\r\n                \r\n                <Label color='red' horizontal className='w-24'>\r\n                    出走馬\r\n                </Label>\r\n\r\n            </div>\r\n\r\n            {horseValues.slice(0, 10).map((value, index) => (\r\n                <div key={index}>\r\n                    <div className='flex items-center pt-5'>\r\n                        <Label basic color='red' pointing='right'>\r\n                            {index + 1}番\r\n                        </Label>\r\n                        <Input\r\n                            placeholder={`${index + 1}番馬`}\r\n                            className='w-full lg:w-28'\r\n                            style={{ marginRight: 18 }}\r\n                            value={value}\r\n                            onChange={(e) => handleInputChange(index, e.target.value)}\r\n                        />\r\n                        <Label basic color='red' pointing='right'>\r\n                            {index + 11}番\r\n                        </Label>\r\n                        <Input\r\n                            placeholder={`${index + 11}番馬`}\r\n                            className='w-full lg:w-28'\r\n                            value={horseValues[index + 10]}\r\n                            onChange={(e) => handleInputChange(index + 10, e.target.value)}\r\n                        />\r\n                    </div>\r\n                    <div className='flex items-center pt-5'>\r\n                        {horseValueErrors[index] && (\r\n                            <Text type=\"danger\">\r\n                                これを入力してください。\r\n                            </Text>\r\n                        )}\r\n                        {horseValueErrors[index + 10] && (\r\n                            <Text type=\"danger\">\r\n                                これを入力してください。\r\n                            </Text>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            ))}\r\n\r\n        </Modal>             \r\n    )\r\n}\r\n\r\nexport default RegisterModal;","import React, {useState, useEffect} from 'react'\r\nimport type { ColumnsType } from 'antd/es/table';\r\nimport { RaceDataType } from '../../interface/RaceDataType';\r\nimport ExpandableTable from './ExpandableTable';\r\nimport { Segment, Label } from 'semantic-ui-react';\r\nimport type { DatePickerProps } from 'antd';\r\nimport { DatePicker } from 'antd';\r\nimport { SearchOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { Button, Table } from 'antd';\r\nimport RegisterModal from './RegisterModal';\r\n\r\nimport actions from '../../redux/RaceManagement/actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../redux/store';\r\n\r\n\r\nconst RaceManagementPage = () => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [changeDate, setChangeDate] = useState('');\r\n    const [editData, setEditData] = useState({});\r\n\r\n    const showEditModal = (data:any) => {\r\n        setEditData(data);\r\n        setOpen(!open);\r\n    };\r\n    \r\n    const showModal = () => {\r\n        setEditData({});\r\n        setOpen(!open);\r\n    };\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=>{\r\n        dispatch({\r\n            type: actions.GETPLACES,\r\n        });\r\n    },[]);\r\n\r\n    const onChange: DatePickerProps['onChange'] = (date, dateString) => {\r\n        setChangeDate(dateString);\r\n    };\r\n\r\n    const getSpecificRaceData = () => {\r\n        if (changeDate.length) {\r\n            const data={\r\n                changeDate: changeDate,\r\n            }\r\n            dispatch({\r\n                type: actions.GETSPECIFICRACEDATA,\r\n                payload: data\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Segment raised style={{backgroundColor: \"#f5deb3\"}}>\r\n\r\n            <div className='pb-3'>\r\n                <Label as='a' color='orange' ribbon>\r\n                    登録レース一覧\r\n                </Label>\r\n            </div>\r\n\r\n\r\n            <div className='relative pt-5 pb-8'>\r\n\r\n                <Label color='red' horizontal>\r\n                    開 催 日\r\n                </Label>\r\n\r\n                <DatePicker onChange={onChange}/>\r\n            \r\n                <Button icon={<SearchOutlined />} className='ml-3' danger onClick={getSpecificRaceData}> 検 索 </Button>\r\n                \r\n                <Button icon={<PlusOutlined />} className='w-full sm:w-40 sm:absolute sm:absolute top-5 right-0' danger onClick={showModal}> 新 規 登 録 </Button>\r\n\r\n            </div>\r\n\r\n            <ExpandableTable showEditModal={showEditModal} />\r\n\r\n            <RegisterModal \r\n                _open={open}\r\n                showModal={showModal}\r\n                editData={editData}\r\n            />\r\n\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default RaceManagementPage;"],"names":["minute_data","value","label","hour_data","month_data","race_number_data","user_role_data","checkOverlap","array","i","length","element","filter","item","_ref","filteredArray","setRaceResult","no","webRaceResults","rows","setRows","React","id","rowData","setRowData","map","index","_webRaceResults$index","_webRaceResults$index2","_webRaceResults$index3","_webRaceResults$index4","rank","concat","horse","odds","single","double","_jsxs","children","_jsx","Button","onClick","addRow","newRow","newRowData","deleteRow","updatedRows","pop","updatedRowData","style","marginLeft","Table","celled","unstackable","Header","Row","HeaderCell","className","Body","row","Cell","Input","onChange","e","target","Select","errorRowDataState","toast","error","options","onBlur","showEditModal","columns_data","title","dataIndex","key","width","render","_","record","Label","color","horizontal","marginRight","places","name","showModal","Badge","status","text","ellipsis","EXPAND_COLUMN","data","setData","useState","loading","setLoading","tableParams","setTableParams","pagination","current","pageSize","dispatch","useDispatch","races","useSelector","state","raceReducer","deleteHorseArray","setDeleteHorseArray","open","setOpen","deleteId","setDeleteId","useEffect","type","actions","GETRACESDATA","hideModal","console","log","raceResult","changeDeleteData","setChangeDeleteData","deleteRace","DELETERACEDATA","payload","_Fragment","columns","rowKey","dataSource","handleTableChange","filters","sorter","extra","_tableParams$paginati","locale","emptyText","Empty","description","scroll","x","expandable","expandedRowRender","running_horses","newWebRaceResults","web_race_results","basic","pointing","NewEditTable","_value","defaultValue","delete_horses","toString","undefined","body","race_result","delete_horses_data","CREATERACERESULT","handleSubmit","Modal","onCancel","closable","footer","secondary","primary","Message","info","header","Text","Typography","_open","editData","placesData","setPlacesData","updateData","obj","Object","entries","setEventDate","event_date","setEventPlace","event_place","setRaceNumber","race_number","setHourData","setMinuteData","setRaceName","race_name","setMonthData","newHorseData","horseValues","split","setHorseValues","eventDate","eventDateError","setEventError","onEventDataChange","date","dateString","eventPlace","eventPlaceError","setEventPlaceError","raceNumber","raceNumberError","setRaceNumberError","hourData","hourDataError","setHourDataError","minuteData","minuteDataError","setMinuteDataError","raceName","raceNameError","setRaceNameError","monthData","monthDataError","setMonthDataError","Array","fill","handleInputChange","updatedHorseValues","horseValueErrors","setHorseValueErrors","handleOk","horse_data","UPDATERACESTORE","NEWRACESTORE","top","onOk","handleCancel","_ref2","OkBtn","DatePicker","dayjs","Number","placeholder","slice","RaceManagementPage","changeDate","setChangeDate","setEditData","GETPLACES","Segment","raised","backgroundColor","as","ribbon","icon","SearchOutlined","danger","getSpecificRaceData","GETSPECIFICRACEDATA","PlusOutlined","ExpandableTable","RegisterModal"],"sourceRoot":""}