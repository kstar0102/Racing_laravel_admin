{"version":3,"file":"static/js/281.93cf62f9.chunk.js","mappings":"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","sources":["config/global.tsx","components/NewEditTable.tsx","pages/RaceManagementPage/ExpandableTable.tsx","pages/RaceManagementPage/RegisterModal.tsx","pages/RaceManagementPage/index.tsx"],"sourcesContent":["export const minute_data = [\r\n    { value: '00', label: '00' },\r\n    { value: '05', label: '05' },\r\n    { value: '10', label: '10' },\r\n    { value: '15', label: '15' },\r\n    { value: '20', label: '20' },\r\n    { value: '25', label: '25' },\r\n    { value: '30', label: '30' },\r\n    { value: '35', label: '35' },\r\n    { value: '40', label: '40' },\r\n    { value: '45', label: '45' },\r\n    { value: '50', label: '50' },\r\n    { value: '55', label: '55' },\r\n];\r\n\r\nexport const hour_data = [\r\n    { value: '13', label: '13' },\r\n    { value: '14', label: '14' },\r\n    { value: '15', label: '15' },\r\n    { value: '16', label: '16' },\r\n    { value: '17', label: '17' },\r\n    { value: '18', label: '18' },\r\n    { value: '19', label: '19' },\r\n    { value: '20', label: '20' },\r\n    { value: '21', label: '21' },\r\n    { value: '22', label: '22' },\r\n    { value: '23', label: '23' },\r\n    { value: '00', label: '00' },\r\n    { value: '01', label: '01' },\r\n    { value: '02', label: '02' },\r\n];\r\n\r\nexport const month_data = [\r\n    { value: '1', label: '1月' },\r\n    { value: '2', label: '2月' },\r\n    { value: '3', label: '3月' },\r\n    { value: '4', label: '4月' },\r\n    { value: '5', label: '5月' },\r\n    { value: '6', label: '6月' },\r\n    { value: '7', label: '7月' },\r\n    { value: '8', label: '8月' },\r\n    { value: '9', label: '9月' },\r\n    { value: '10', label: '10月' },\r\n    { value: '11', label: '11月' },\r\n    { value: '12', label: '12月' },\r\n]\r\n\r\nexport const race_number_data = [\r\n    { value: '1R', label: '1R' },\r\n    { value: '2R', label: '2R' },\r\n    { value: '3R', label: '3R' },\r\n    { value: '4R', label: '4R' },\r\n    { value: '5R', label: '5R' },\r\n    { value: '6R', label: '6R' },\r\n    { value: '7R', label: '7R' },\r\n    { value: '8R', label: '8R' },\r\n    { value: '9R', label: '9R' },\r\n    { value: '10R', label: '10R' },\r\n    { value: '11R', label: '11R' },\r\n    { value: '12R', label: '12R' },\r\n]\r\n\r\nexport const user_role_data = [\r\n  { value: '0', label: 'ユーザー' },\r\n  { value: '1', label: '管理者' },\r\n  { value: '2', label: 'スーパーユーザー' },\r\n]\r\n\r\nexport const color_data = [\r\n  \"red\", \"blue\",\"tear\"\r\n]\r\n\r\nexport const checkOverlap = (array: any) => {\r\n  \r\n    for (let i = 0; i < array.length; i++) {\r\n      const element = array[i];\r\n      const newArray = array.filter((item:any) => item == element);\r\n      if (newArray.length > 1) {\r\n        return false;\r\n      }else{\r\n        return true;\r\n      }\r\n    }\r\n  \r\n};","import React, { useEffect } from 'react';\nimport { Table } from 'semantic-ui-react';\nimport { Select, Input, Button } from 'antd';\n\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst NewEditTable = ({filteredArray, setRaceResult, no, webRaceResults} : any) => {\n    \n    const [rows, setRows] = React.useState([\n        { id: 1 },\n        { id: 2 },\n        { id: 3 },\n    ]);\n\n    const [rowData, setRowData] = React.useState(rows.map((value, index) => ({\n        rank: `${index + 1}着`,\n        horse:  webRaceResults.length ? webRaceResults[index]?.horse : filteredArray[0]['value'],\n        odds: webRaceResults.length ? webRaceResults[index]?.odds : '',\n        single: webRaceResults.length ? webRaceResults[index]?.single : '',\n        double: webRaceResults.length ? webRaceResults[index]?.double : '',\n    })));\n\n    useEffect(()=>{\n        if (webRaceResults.length) {\n            let updatedRows: { id: any; }[] = [];\n            webRaceResults.map((element:any, index:any) => {\n                updatedRows.push({ id: index+1});\n                return element;\n            });\n            setRows(updatedRows);\n            setRowData(updatedRows.map((value, index) => ({\n                rank: webRaceResults[index]?.rank,\n                horse:  webRaceResults.length ? webRaceResults[index]?.horse : filteredArray[0]['value'],\n                odds: webRaceResults.length ? webRaceResults[index]?.odds : '',\n                single: webRaceResults.length ? webRaceResults[index]?.single : '',\n                double: webRaceResults.length ? webRaceResults[index]?.double : '',\n            })));\n        }\n    },[webRaceResults]);\n\n    const addRow = () => {\n        const newRow = { id: rows.length + 1 };\n        const newRowData = {\n            rank: '3着',\n            horse: filteredArray[0]['value'],\n            odds: '',\n            single: '',\n            double: '',\n        };\n        \n        setRows([...rows, newRow]);\n        setRowData([...rowData, newRowData]);\n    };\n\n    const deleteRow = () => {\n        if (rows.length > 0) {\n            const updatedRows = [...rows];\n            updatedRows.pop(); // 最後の行を削除\n            setRows(updatedRows);\n    \n            const updatedRowData = [...rowData];\n            updatedRowData.pop(); // 最後の行のデータを削除\n            setRowData(updatedRowData);\n        }\n    };\n\n    return (\n        <div>\n            <Button onClick={addRow}>\n                追  加\n            </Button>\n            <Button onClick={deleteRow} style={{marginLeft: 10}}>\n                削 除\n            </Button>\n            <Table celled unstackable>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell className='w-24'>順位</Table.HeaderCell>\n                        <Table.HeaderCell>馬名</Table.HeaderCell>\n                        <Table.HeaderCell className='w-28'>単勝オッズ</Table.HeaderCell>\n                        <Table.HeaderCell className='w-28'>単勝</Table.HeaderCell>\n                        <Table.HeaderCell className='w-28'>複勝</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                    {rows.map((row, index) => {\n                        return (\n                        <Table.Row key={index}>\n                            <Table.Cell>\n                                <Input \n                                    value={rowData[index].rank} \n                                    onChange={(e) => {\n                                        const updatedRowData = [...rowData];\n                                        updatedRowData[index].rank = e.target.value;\n                                        setRowData(updatedRowData);\n                                        setRaceResult([no, updatedRowData]);\n                                    }}\n                                />\n                            </Table.Cell>\n                            <Table.Cell>\n                                <Select\n                                    value={rowData[index].horse}\n                                    className='w-full'\n                                    onChange={(value) => {\n                                        const updatedRowData = [...rowData];\n                                        let errorRowDataState = true;\n                                        updatedRowData.map((item)=>{\n                                            if (item.horse == value) {\n                                                errorRowDataState = false;\n                                            }\n                                            return item;\n                                        });\n                                        if (errorRowDataState) {\n                                            updatedRowData[index].horse = value;\n                                            setRowData(updatedRowData);\n                                            setRaceResult([no, updatedRowData]);\n                                        }else{\n                                            toast.error(\"予想が被っています。\");\n                                        }\n                                    }}\n                                    options={filteredArray}\n                                />\n                            </Table.Cell>\n                            <Table.Cell>\n\n                                <Input\n                                    value={rowData[index].odds}\n                                    onChange={(e) => {\n                                        const updatedRowData = [...rowData];\n                                        updatedRowData[index].odds = e.target.value;\n                                        setRowData(updatedRowData);\n                                        setRaceResult([no, updatedRowData]);\n                                    }}\n                                    onBlur={()=> {\n                                        const updatedRowData = [...rowData];\n                                        if (rowData[index].rank == \"1着\") {\n                                            updatedRowData[index].single = updatedRowData[index].odds * 100;\n                                        }\n                                        setRowData(updatedRowData);\n                                        setRaceResult([no, updatedRowData]);\n                                    }}\n                                />\n\n                            </Table.Cell>\n                            <Table.Cell>\n                                {\n                                    rowData[index].rank == \"1着\" && (\n                                        <Input\n                                            value={rowData[index].single}\n                                            onChange={(e) => {\n                                                const updatedRowData = [...rowData];\n                                                updatedRowData[index].single = e.target.value;\n                                                setRowData(updatedRowData);\n                                                setRaceResult([no, updatedRowData]);\n                                            }}\n                                        />\n                                    )\n                                }\n                            </Table.Cell>\n                            <Table.Cell>\n                                <Input\n                                    value={rowData[index].double}\n                                    onChange={(e) => {\n                                        const updatedRowData = [...rowData];\n                                        updatedRowData[index].double = e.target.value;\n                                        setRowData(updatedRowData);\n                                        setRaceResult([no, updatedRowData]);\n                                    }}\n                                />\n                            </Table.Cell>\n                        </Table.Row>\n                    )})}\n                </Table.Body>\n            </Table>\n        </div>\n\n    );\n\n};\n\nexport default NewEditTable;","import React, { useEffect, useState } from 'react';\r\nimport qs from 'qs';\r\nimport { Table, Empty, Select, Badge, Modal } from 'antd';\r\nimport type { TablePaginationConfig } from 'antd/es/table';\r\nimport type { FilterValue, SorterResult, TableCurrentDataSource } from 'antd/es/table/interface';\r\nimport { RaceDataType } from '../../interface/RaceDataType';\r\nimport type { ColumnsType } from 'antd/es/table';\r\nimport { Label, Button, Message } from 'semantic-ui-react'\r\nimport NewEditTable from '../../components/NewEditTable';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport actions from '../../redux/RaceManagement/actions';\r\nimport { RootState } from '../../redux/store';\r\n\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\ninterface TableParams {\r\n  pagination?: TablePaginationConfig;\r\n  sortField?: string;\r\n  sortOrder?: string;\r\n  filters?: Record<string, FilterValue | null>;\r\n}\r\n\r\n// const getRandomuserParams = (params: TableParams) => ({\r\n//     results: params.pagination?.pageSize,\r\n//     page: params.pagination?.current,\r\n//     ...params,\r\n// });\r\n\r\ninterface IExpandableTable {\r\n    showEditModal: any;\r\n}\r\n\r\ninterface RaceDataWithHorses extends RaceDataType {\r\n    running_horses: { id: number; name: string }[];\r\n    web_race_results: [];\r\n    delete_horses: [];\r\n}\r\n\r\nconst ExpandableTable: React.FC<IExpandableTable> = ({showEditModal}) => {\r\n    const columns_data: ColumnsType<RaceDataType> = [\r\n        // { title: 'id', dataIndex: 'id', key: 'id', width: '8%', responsive: ['xs'], },\r\n        { title: '開催日', dataIndex: 'event_date', key: 'event_date', width: '20%' },\r\n        { title: '開催場所', dataIndex: 'event_place', key: 'event_place', width: '10%',render: (_, record) => (\r\n            <div>\r\n                <Label color='purple' horizontal className={'cursor'} style={{marginRight: 15,}}>\r\n                    {record.places.name}\r\n                </Label>\r\n            </div>\r\n        )  },\r\n        { title: 'Race', dataIndex: 'race_number', key: 'race_number' },\r\n        { title: 'レース名', dataIndex: 'race_name', key: 'race_name' },\r\n        { title: '備考', dataIndex: 'action', key: 'action', width: '20%',render: (_, record) => (\r\n            <div>\r\n                <Label color='red' horizontal className={'cursor'} style={{marginRight: 15,}} onClick={() => showModal(record.id)}>\r\n                    削  除\r\n                </Label>\r\n                <Label color='teal' horizontal className={'cursor'} style={{marginRight: 15,}} onClick={() => showEditModal(record)}>\r\n                    編  集\r\n                </Label>\r\n                <Badge status=\"success\" text=\"レース結果変更\" />\r\n            </div>\r\n        ),\r\n        ellipsis: true,},\r\n        Table.EXPAND_COLUMN,\r\n    ];\r\n\r\n    \r\n    const [data, setData] = useState<RaceDataType[]>();\r\n    const [loading, setLoading] = useState(false);\r\n    const [tableParams, setTableParams] = useState<TableParams>({\r\n        pagination: {\r\n            current: 1,\r\n            pageSize: 10,\r\n        },\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n    const {races} = useSelector((state:RootState) => state.raceReducer);\r\n    const [deleteHorseArray, setDeleteHorseArray] = useState(['0','0','0','0','0']);\r\n    const [open, setOpen] = useState(false);\r\n    const [deleteId, setDeleteId] = useState(0);\r\n\r\n    useEffect(()=>{\r\n        setLoading(true);\r\n        dispatch({\r\n            type: actions.GETRACESDATA\r\n        });\r\n    },[]);\r\n\r\n    useEffect(()=>{\r\n        dispatch({\r\n            type: actions.GETRACESDATA\r\n        });\r\n    },[]);\r\n\r\n    const showModal = (id:any) => {\r\n        setOpen(true);\r\n        setDeleteId(id);\r\n    };\r\n    \r\n    const hideModal = () => {\r\n        setOpen(false);\r\n        setDeleteId(0);\r\n    };\r\n\r\n    useEffect(()=>{\r\n        setLoading(false);\r\n        setData(races);\r\n    },[races]);\r\n\r\n    const handleTableChange = (\r\n        pagination: TablePaginationConfig,\r\n        filters: Record<string, FilterValue | null> ,\r\n        sorter: SorterResult<RaceDataType> | SorterResult<RaceDataType>[],\r\n        extra: TableCurrentDataSource<RaceDataType>\r\n    ) => {\r\n        setTableParams({\r\n        pagination,\r\n        filters,\r\n        ...sorter,\r\n        });\r\n    \r\n        // `dataSource` is useless since `pageSize` changed\r\n        if (pagination.pageSize !== tableParams.pagination?.pageSize) {\r\n        setData([]);\r\n        }\r\n    };\r\n    \r\n    const [raceResult, setRaceResult] = useState<undefined | any[]>([]);\r\n    const [changeDeleteData, setChangeDeleteData] = useState<undefined | any[]>([]); \r\n\r\n    const handleSubmit = (id:any) => {\r\n        console.log(raceResult, \"raceResult1\");\r\n        console.log(changeDeleteData, \"changeDeleteData1\");\r\n        console.log(deleteHorseArray, \"deleteHorseArray1\");\r\n        if (!raceResult?.length && changeDeleteData?.length) {\r\n            const body = {\r\n                id: id,\r\n                race_result: changeDeleteData,\r\n                delete_horses_data: deleteHorseArray,\r\n            };\r\n            dispatch({\r\n                type: actions.CREATERACERESULT,\r\n                payload: body\r\n            });\r\n        }else if (id == undefined || raceResult == undefined) {\r\n            toast.error(\"レース結果入力の値が正しく入力されていることを確認してください。\");\r\n        }else if (id == raceResult[0]) {\r\n            const race_result = raceResult[1];\r\n            const body = {\r\n                id: id,\r\n                race_result: race_result,\r\n                delete_horses_data: deleteHorseArray,\r\n            };\r\n\r\n            dispatch({\r\n                type: actions.CREATERACERESULT,\r\n                payload: body\r\n            });\r\n        }else{\r\n            toast.error(\"レース結果入力状態をもう一度確認してください。\");\r\n        }\r\n    }\r\n\r\n    const deleteRace = () => {\r\n        setOpen(false);\r\n        setDeleteId(0);\r\n        dispatch({\r\n            type: actions.DELETERACEDATA,\r\n            payload: deleteId\r\n        });\r\n    };\r\n    console.log(deleteHorseArray, \"deleteHorseArray\");\r\n    return (\r\n        <>\r\n            <Table\r\n                columns={columns_data}\r\n                rowKey={(record) => record.id}\r\n                dataSource={data}\r\n                pagination={tableParams.pagination}\r\n                loading={loading}\r\n                onChange={handleTableChange}\r\n                locale={{\r\n                    emptyText: <Empty description=\"データがありません\" />,\r\n                }}\r\n                scroll={{ x: true }}\r\n                expandable={{\r\n                    expandedRowRender: (record) => \r\n                    {   \r\n                        const data = record as RaceDataWithHorses;\r\n                        const filteredArray = data.running_horses.map((horse) => {\r\n                            return {\r\n                                value: horse.id,\r\n                                label: horse.name,\r\n                            };\r\n                        });\r\n                        const newWebRaceResults = data.web_race_results.map((value:any, index) => ({\r\n                            rank: `${index + 1}着`,\r\n                            horse:  value ? value.horse : filteredArray[0]['value'],\r\n                            odds: value ? value.odds : '',\r\n                            single: value ? value.single : '',\r\n                            double: value ? value.double : '',\r\n                        }));\r\n\r\n                        return (\r\n                            <div className='flex flex-col md:flex-row'>\r\n                            \r\n                                <div className='w-full lg:w-1/2 pr-5'>\r\n                                    <Label basic color='red' pointing='below'>\r\n                                        レース結果入力\r\n                                    </Label>\r\n                                \r\n                                <NewEditTable filteredArray={filteredArray} setRaceResult={setRaceResult} no={record.id} webRaceResults={data.web_race_results} />\r\n\r\n                                </div>\r\n\r\n                                <div className='w-full lg:w-1/2 lg:pl-5 pt-5'>\r\n                                    \r\n                                    <div >\r\n                                        <Label basic color='red' pointing='below'>\r\n                                            消し馬登録\r\n                                        </Label>\r\n                                    </div>\r\n                                    {\r\n                                        deleteHorseArray.map((_value, index) => (\r\n                                            <div className='pt-3 pb-3' key={index}>\r\n                                                <Label color='red' horizontal className='w-24'>\r\n                                                    {index+1}人気\r\n                                                </Label>\r\n                                                <Select\r\n                                                    defaultValue={data.delete_horses.length ? (data.delete_horses[index] as { name: string }).name : filteredArray[0]['label']}\r\n                                                    className='w-full lg:w-64 lg:ml-10'\r\n                                                    onChange={(value) => {\r\n                                                        // let updatedRowData: React.SetStateAction<string[]> = [];\r\n                                                        // if (data.delete_horses.length) {\r\n                                                        //     updatedRowData = data.delete_horses.map((item:any)=> item.name);\r\n                                                        // }else{\r\n                                                        //     updatedRowData = [filteredArray[0]['value'].toString(),filteredArray[0]['value'].toString(),filteredArray[0]['value'].toString(),filteredArray[0]['value'].toString(),filteredArray[0]['value'].toString()];\r\n                                                        // }\r\n                                                        const updatedRowData = [...deleteHorseArray];\r\n                                                        updatedRowData[index] = value;\r\n                                                        console.log(updatedRowData, \"updatedRowData\");\r\n                                                        setDeleteHorseArray(updatedRowData);\r\n                                                        setChangeDeleteData(newWebRaceResults);\r\n                                                    }}\r\n                                                    options={filteredArray}\r\n                                                />\r\n                                            </div>\r\n                                        ))\r\n                                    }\r\n                                    \r\n                                    <div className='flex justify-center'>\r\n                                        <Button className=\"w-full lg:w-60 lg:mr-64\" onClick={()=>handleSubmit(record.id)}>保&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存</Button>\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n\r\n                            </div>\r\n                        )\r\n                    }\r\n                }}\r\n            />\r\n            <Modal\r\n                open={open}\r\n                onCancel={hideModal}\r\n                closable={false}\r\n                footer={() => (\r\n                    <div className='w-full flex justify-center items-center'>\r\n                        <div className='w-40 pr-6'>\r\n                            <Button className=\"w-full\" secondary onClick={hideModal}>い&nbsp;い&nbsp;え</Button>\r\n                        </div>\r\n                        <div className='w-40 pr-6'>\r\n                            <Button className=\"w-full\" primary onClick={deleteRace}>は&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;い</Button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            >\r\n                <Message\r\n                    info\r\n                    header='本当に削除してもよろしいですか？'\r\n                />\r\n            </Modal>\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default ExpandableTable;","import { useEffect, useState } from 'react';\nimport { Button, Modal, Select, Input, Typography } from 'antd';\nimport { hour_data, minute_data, month_data, race_number_data } from '../../config/global';\nimport { Label } from 'semantic-ui-react';\nimport { DatePicker } from 'antd';\nimport type { DatePickerProps } from 'antd';\n\nimport { RootState } from '../../redux/store';\nimport { useDispatch, useSelector } from 'react-redux';\nimport actions from '../../redux/RaceManagement/actions';\nimport dayjs from 'dayjs';\n\nconst { Text } = Typography;\n\ninterface IRegisterModal {\n    _open: boolean;\n    showModal: any;\n    editData: any;\n}\n\nconst RegisterModal : React.FC<IRegisterModal> = ({_open, showModal, editData}) => {\n\n    const [open, setOpen] =  useState(_open);\n    \n    const { places } = useSelector((state: RootState) => state.raceReducer);\n    const [placesData, setPlacesData] = useState([]);\n\n    const dispatch = useDispatch();\n\n    useEffect(()=>{\n        const updateData = places.map((obj:any) => {\n            return {\n                value: obj.id,\n                label: obj.name\n            };\n        });\n        setPlacesData(updateData);\n    },[places]);\n\n    useEffect(()=>{\n        setOpen(_open);\n    },[_open]);\n\n    useEffect(()=>{\n        if (Object.entries(editData).length) {\n            console.log(editData, \"=====++++++++++++++++++++++++++++++\");\n            setEventDate(editData.event_date);\n            setEventPlace(editData.event_place);\n            setRaceNumber(editData.race_number);\n            setHourData(editData.hour_data);\n            setMinuteData(editData.minute_data);\n            setRaceName(editData.race_name);\n            setMonthData(editData.month_data);\n\n            const newHorseData =[...horseValues];\n            editData.running_horses.map((item:any, index:any)=> {\n                newHorseData[index] = item.name.split(\":\")[1];\n                return item;\n            });\n\n            setHorseValues(newHorseData);\n        }else{\n            setEventDate('');\n            setEventPlace('');\n            setRaceNumber('');\n            setHourData('13');\n            setMinuteData('00');\n            setRaceName('');\n            setMonthData('1');\n        }\n    },[editData]);\n\n    const [eventDate, setEventDate] = useState<string>('');\n    const [eventDateError, setEventError] = useState<boolean>(false);\n    const onEventDataChange: DatePickerProps['onChange'] = (date, dateString) => {\n        setEventDate(dateString);\n    };\n\n    const handleCancel = () => {\n        setOpen(!open);\n        showModal();\n    };\n\n    const [eventPlace, setEventPlace] = useState<string>('');\n    const [eventPlaceError, setEventPlaceError] = useState<boolean>(false);\n    const handleEventPlace = (value: string) => {\n        setEventPlace(value);\n    };\n\n    const [raceNumber, setRaceNumber] = useState<string>('');\n    const [raceNumberError, setRaceNumberError] = useState<boolean>(false);\n    const handleRaceNumberChange = (value: string) => {\n        setRaceNumber(value);\n    };\n\n    const [hourData, setHourData] = useState<string>('13');\n    const [hourDataError, setHourDataError] = useState<boolean>(false);\n    const handleHourDataChange = (value: string) => {\n        setHourData(value);\n    };\n\n    const [minuteData, setMinuteData] = useState<string>('00');\n    const [minuteDataError, setMinuteDataError] = useState<boolean>(false);\n    const handleMinuteDataChange = (value: string) => {\n        setMinuteData(value);\n    };\n\n    const [raceName, setRaceName] = useState<string>('');\n    const [raceNameError, setRaceNameError] = useState<boolean>(false);\n    const handleRaceNameChange = (e : any) => {\n        setRaceName(e.target.value);\n    };\n\n    const [monthData, setMonthData] = useState<string>('1');\n    const [monthDataError, setMonthDataError] = useState<boolean>(false);\n    const handleMonthDataChange = (value: string) => {\n        setMonthData(value);\n    };\n\n    const [horseValues, setHorseValues] = useState(Array(20).fill(''));\n    const handleInputChange = (index : number, value : string) => {\n        const updatedHorseValues = [...horseValues];\n        updatedHorseValues[index] = value;\n        setHorseValues(updatedHorseValues);\n    };\n    const [horseValueErrors, setHorseValueErrors] = useState(Array(20).fill(false));\n\n    const handleOk = () => {\n        if (eventDate.length) {\n            setEventError(false);\n        }\n        if (eventPlace) {\n            setEventPlaceError(false);\n        }\n        if (raceNumber.length) {\n            setRaceNumberError(false);\n        }\n        if (hourData.length) {\n            setHourDataError(false);\n        }\n        if (minuteData.length) {\n            setMinuteDataError(false);\n        }\n        if (raceName.length) {\n            setRaceNameError(false);\n        }\n        if (monthData.length) {\n            setMonthDataError(false);\n        }\n\n        if (!eventDate.length) {\n            setEventError(true);\n        }else if (!eventPlace) {\n            setEventPlaceError(true);\n        }else if (!raceNumber.length) {\n            setRaceNumberError(true);\n        }else if (!hourData.length) {\n            setHourDataError(true);\n        }else if (!minuteData.length) {\n            setMinuteDataError(true);\n        }else if (!raceName.length) {\n            setRaceNameError(true);\n        }else if (!monthData.length) {\n            setMonthDataError(true);\n        }else {\n            const filteredArray = horseValues.filter((element) => element !== \"\");\n\n            if (Object.entries(editData).length) {\n                const data = {\n                    event_date: eventDate,\n                    event_place: eventPlace,\n                    race_number: raceNumber,\n                    hour_data: hourData,\n                    minute_data: minuteData,\n                    race_name: raceName,\n                    month_data: monthData,\n                    horse_data: filteredArray\n                }\n        \n                dispatch({\n                    type: actions.UPDATERACESTORE,\n                    payload: {\n                        data: data,\n                        id: editData.id\n                    }\n                });\n            }else{\n                const data = {\n                    event_date: eventDate,\n                    event_place: eventPlace,\n                    race_number: raceNumber,\n                    hour_data: hourData,\n                    minute_data: minuteData,\n                    race_name: raceName,\n                    month_data: monthData,\n                    horse_data: filteredArray\n                }\n        \n                dispatch({\n                    type: actions.NEWRACESTORE,\n                    payload: data\n                });\n            }\n    \n            setOpen(!open);\n            showModal();\n        }\n    };\n    console.log(places, \"================================\");\n    console.log(eventPlace, \"---------------------------\");\n    console.log(places[eventPlace], \"---------------------------\");\n    return (\n\n        <Modal\n            open={open}\n            style={{ top: 20 }}\n            title=\"新 規 登 録\"\n            onOk={handleOk}\n            onCancel={handleCancel}\n            footer={(_, { OkBtn, }) => (\n                <div className='pr-6'>\n                    <Button className=\"w-full\" onClick={handleOk}>保&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;存</Button>\n                </div>\n            )}\n            width={400}\n        >\n\n            <div className='flex items-center'>\n\n                <Label color='red' horizontal className='w-24'>\n                    開　催　日\n                </Label>\n\n                {\n                    eventDate.length ? \n                    <DatePicker className='w-full lg:w-64' onChange={onEventDataChange} id=\"event_date\" name=\"event_date\" value={dayjs(eventDate)} /> : \n                    <DatePicker className='w-full lg:w-64' onChange={onEventDataChange} id=\"event_date\" name=\"event_date\" />\n                }\n                \n            </div>\n\n            { eventDateError && (<Text type=\"danger\" className='p-20'>日付を入力してください。</Text>) }\n\n            <div className='flex items-center pt-5'>\n                \n                <Label color='red' horizontal className='w-24'>\n                    開催場所\n                </Label>\n                <Select\n                    value={eventPlace ? placesData[Number(eventPlace) - 1] : \"開催場所を選択してください。\"}\n                    className='w-full lg:w-64'\n                    onChange={handleEventPlace}\n                    options={placesData}\n                />\n\n            </div>\n            \n            { eventPlaceError && (<Text type=\"danger\" className='p-20'>開催地を選択してください。</Text>) }\n\n            <div className='flex items-center pt-5'>\n                \n                <Label color='red' horizontal className='w-24'>\n                    レース番号\n                </Label>\n                <Select\n                    value={raceNumber ? raceNumber : \"レース番号を選択してください。\"}\n                    className='w-full lg:w-64'\n                    onChange={handleRaceNumberChange}\n                    options={race_number_data}\n                />\n\n            </div>\n            \n            { raceNumberError && (<Text type=\"danger\" className='p-20'>レース番号を選択してください。</Text>) }\n            \n            <div className='flex items-center pt-5'>\n                \n                <Label color='red' horizontal className='w-24'>\n                    発走時刻\n                </Label>\n                <Select\n                    value={hourData ? hourData : hourData}\n                    className='w-full lg:w-28 mr-2'\n                    onChange={handleHourDataChange}\n                    options={hour_data}\n                />\n                \n                <Label color='teal' className='w-4'>\n                    :\n                </Label>\n\n                <Select\n                    value={minuteData ? minuteData : minuteData}\n                    className='w-full lg:w-28 ml-2'\n                    onChange={handleMinuteDataChange}\n                    options={minute_data}\n                />  \n            </div>\n\n            { (hourDataError || minuteDataError) && (<Text type=\"danger\" className='p-20'>発走時刻を選択してください。</Text>) }\n\n            <div className='flex items-center pt-5'>\n                \n                <Label color='red' horizontal className='w-24'>\n                    レース名\n                </Label>\n                <Input placeholder=\"レース名\" className='w-full lg:w-64' onChange={handleRaceNameChange} value={raceName}/>\n\n            </div>\n\n            { raceNameError && (<Text type=\"danger\" className='p-20'>レース名を選択してください。</Text>) }\n\n            <div className='flex items-center pt-5'>\n                \n                <Label color='red' horizontal className='w-24'>\n                    集計月\n                </Label>\n                <Select\n                    value={monthData ? monthData : monthData}\n                    className='w-full lg:w-64'\n                    onChange={handleMonthDataChange}\n                    options={month_data}\n                />\n\n            </div>\n            \n            { monthDataError && (<Text type=\"danger\" className='p-20'>集計月を選択してください。</Text>) }\n\n            <div className='flex items-center pt-5'>\n                \n                <Label color='red' horizontal className='w-24'>\n                    出走馬\n                </Label>\n\n            </div>\n\n            {horseValues.slice(0, 10).map((value, index) => (\n                <div key={index}>\n                    <div className='flex items-center pt-5'>\n                        <Label basic color='red' pointing='right'>\n                            {index + 1}番\n                        </Label>\n                        <Input\n                            placeholder={`${index + 1}番馬`}\n                            className='w-full lg:w-28'\n                            style={{ marginRight: 18 }}\n                            value={value}\n                            onChange={(e) => handleInputChange(index, e.target.value)}\n                        />\n                        <Label basic color='red' pointing='right'>\n                            {index + 11}番\n                        </Label>\n                        <Input\n                            placeholder={`${index + 11}番馬`}\n                            className='w-full lg:w-28'\n                            value={horseValues[index + 10]}\n                            onChange={(e) => handleInputChange(index + 10, e.target.value)}\n                        />\n                    </div>\n                    <div className='flex items-center pt-5'>\n                        {horseValueErrors[index] && (\n                            <Text type=\"danger\">\n                                これを入力してください。\n                            </Text>\n                        )}\n                        {horseValueErrors[index + 10] && (\n                            <Text type=\"danger\">\n                                これを入力してください。\n                            </Text>\n                        )}\n                    </div>\n                </div>\n            ))}\n\n        </Modal>             \n    )\n}\n\nexport default RegisterModal;","import React, {useState, useEffect} from 'react'\r\nimport type { ColumnsType } from 'antd/es/table';\r\nimport { RaceDataType } from '../../interface/RaceDataType';\r\nimport ExpandableTable from './ExpandableTable';\r\nimport { Segment, Label } from 'semantic-ui-react';\r\nimport type { DatePickerProps } from 'antd';\r\nimport { DatePicker } from 'antd';\r\nimport { SearchOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport { Button, Table } from 'antd';\r\nimport RegisterModal from './RegisterModal';\r\n\r\nimport actions from '../../redux/RaceManagement/actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../redux/store';\r\n\r\n\r\nconst RaceManagementPage = () => {\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [changeDate, setChangeDate] = useState('');\r\n    const [editData, setEditData] = useState({});\r\n\r\n    const showEditModal = (data:any) => {\r\n        setEditData(data);\r\n        setOpen(!open);\r\n    };\r\n    \r\n    const showModal = () => {\r\n        setEditData({});\r\n        setOpen(!open);\r\n    };\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(()=>{\r\n        dispatch({\r\n            type: actions.GETPLACES,\r\n        });\r\n    },[]);\r\n\r\n    const onChange: DatePickerProps['onChange'] = (date, dateString) => {\r\n        setChangeDate(dateString);\r\n    };\r\n\r\n    const getSpecificRaceData = () => {\r\n        if (changeDate.length) {\r\n            const data={\r\n                changeDate: changeDate,\r\n            }\r\n            dispatch({\r\n                type: actions.GETSPECIFICRACEDATA,\r\n                payload: data\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Segment raised style={{backgroundColor: \"#f5deb3\"}}>\r\n\r\n            <div className='pb-3'>\r\n                <Label as='a' color='orange' ribbon>\r\n                    登録レース一覧\r\n                </Label>\r\n            </div>\r\n\r\n\r\n            <div className='relative pt-5 pb-8'>\r\n\r\n                <Label color='red' horizontal>\r\n                    開 催 日\r\n                </Label>\r\n\r\n                <DatePicker onChange={onChange}/>\r\n            \r\n                <Button icon={<SearchOutlined />} className='ml-3' danger onClick={getSpecificRaceData}> 検 索 </Button>\r\n                \r\n                <Button icon={<PlusOutlined />} className='w-full sm:w-40 sm:absolute sm:absolute top-5 right-0' danger onClick={showModal}> 新 規 登 録 </Button>\r\n\r\n            </div>\r\n\r\n            <ExpandableTable showEditModal={showEditModal} />\r\n\r\n            <RegisterModal \r\n                _open={open}\r\n                showModal={showModal}\r\n                editData={editData}\r\n            />\r\n\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default RaceManagementPage;"],"names":["minute_data","value","label","hour_data","month_data","race_number_data","user_role_data","checkOverlap","array","i","length","element","filter","item","_ref","filteredArray","setRaceResult","no","webRaceResults","rows","setRows","React","id","rowData","setRowData","map","index","_webRaceResults$index","_webRaceResults$index2","_webRaceResults$index3","_webRaceResults$index4","rank","concat","horse","odds","single","double","useEffect","updatedRows","push","_webRaceResults$index5","_webRaceResults$index6","_webRaceResults$index7","_webRaceResults$index8","_webRaceResults$index9","_jsxs","children","_jsx","Button","onClick","addRow","newRow","newRowData","deleteRow","pop","updatedRowData","style","marginLeft","Table","celled","unstackable","Header","Row","HeaderCell","className","Body","row","Cell","Input","onChange","e","target","Select","errorRowDataState","toast","error","options","onBlur","showEditModal","columns_data","title","dataIndex","key","width","render","_","record","Label","color","horizontal","marginRight","places","name","showModal","Badge","status","text","ellipsis","EXPAND_COLUMN","data","setData","useState","loading","setLoading","tableParams","setTableParams","pagination","current","pageSize","dispatch","useDispatch","races","useSelector","state","raceReducer","deleteHorseArray","setDeleteHorseArray","open","setOpen","deleteId","setDeleteId","type","actions","GETRACESDATA","hideModal","raceResult","changeDeleteData","setChangeDeleteData","deleteRace","DELETERACEDATA","payload","console","log","_Fragment","columns","rowKey","dataSource","handleTableChange","filters","sorter","extra","_tableParams$paginati","locale","emptyText","Empty","description","scroll","x","expandable","expandedRowRender","running_horses","newWebRaceResults","web_race_results","basic","pointing","NewEditTable","_value","defaultValue","delete_horses","undefined","body","race_result","delete_horses_data","CREATERACERESULT","handleSubmit","Modal","onCancel","closable","footer","secondary","primary","Message","info","header","Text","Typography","_open","editData","placesData","setPlacesData","updateData","obj","Object","entries","setEventDate","event_date","setEventPlace","event_place","setRaceNumber","race_number","setHourData","setMinuteData","setRaceName","race_name","setMonthData","newHorseData","horseValues","split","setHorseValues","eventDate","eventDateError","setEventError","onEventDataChange","date","dateString","eventPlace","eventPlaceError","setEventPlaceError","raceNumber","raceNumberError","setRaceNumberError","hourData","hourDataError","setHourDataError","minuteData","minuteDataError","setMinuteDataError","raceName","raceNameError","setRaceNameError","monthData","monthDataError","setMonthDataError","Array","fill","handleInputChange","updatedHorseValues","horseValueErrors","setHorseValueErrors","handleOk","horse_data","UPDATERACESTORE","NEWRACESTORE","top","onOk","handleCancel","_ref2","OkBtn","DatePicker","dayjs","Number","placeholder","slice","RaceManagementPage","changeDate","setChangeDate","setEditData","GETPLACES","Segment","raised","backgroundColor","as","ribbon","icon","SearchOutlined","danger","getSpecificRaceData","GETSPECIFICRACEDATA","PlusOutlined","ExpandableTable","RegisterModal"],"sourceRoot":""}